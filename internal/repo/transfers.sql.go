// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transfers.sql

package repo

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
  from_id_account,
  to_id_account,
  amount
) VALUES (
  $1, $2, $3
)
RETURNING id_transfer, from_id_account, to_id_account, amount, create_at
`

type CreateTransferParams struct {
	FromIDAccount int64
	ToIDAccount   int64
	Amount        int64
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromIDAccount, arg.ToIDAccount, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.IDTransfer,
		&i.FromIDAccount,
		&i.ToIDAccount,
		&i.Amount,
		&i.CreateAt,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id_transfer, from_id_account, to_id_account, amount, create_at FROM transfers
WHERE id_transfer = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, idTransfer int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, idTransfer)
	var i Transfer
	err := row.Scan(
		&i.IDTransfer,
		&i.FromIDAccount,
		&i.ToIDAccount,
		&i.Amount,
		&i.CreateAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id_transfer, from_id_account, to_id_account, amount, create_at FROM transfers
ORDER BY id_transfer
LIMIT $1 OFFSET $2
`

type ListTransfersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.IDTransfer,
			&i.FromIDAccount,
			&i.ToIDAccount,
			&i.Amount,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersByFromAccount = `-- name: ListTransfersByFromAccount :many
SELECT id_transfer, from_id_account, to_id_account, amount, create_at FROM transfers
WHERE from_id_account = $3
ORDER BY id_transfer
LIMIT $1 OFFSET $2
`

type ListTransfersByFromAccountParams struct {
	Limit         int32
	Offset        int32
	FromIDAccount int64
}

func (q *Queries) ListTransfersByFromAccount(ctx context.Context, arg ListTransfersByFromAccountParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersByFromAccount, arg.Limit, arg.Offset, arg.FromIDAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.IDTransfer,
			&i.FromIDAccount,
			&i.ToIDAccount,
			&i.Amount,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersByToAccount = `-- name: ListTransfersByToAccount :many
SELECT id_transfer, from_id_account, to_id_account, amount, create_at FROM transfers
WHERE to_id_account = $3
ORDER BY id_transfer
LIMIT $1 OFFSET $2
`

type ListTransfersByToAccountParams struct {
	Limit       int32
	Offset      int32
	ToIDAccount int64
}

func (q *Queries) ListTransfersByToAccount(ctx context.Context, arg ListTransfersByToAccountParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersByToAccount, arg.Limit, arg.Offset, arg.ToIDAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.IDTransfer,
			&i.FromIDAccount,
			&i.ToIDAccount,
			&i.Amount,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
