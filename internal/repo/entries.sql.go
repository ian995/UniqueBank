// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: entries.sql

package repo

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
  id_account,
  amount
) VALUES (
  $1, $2
)
RETURNING id_entries, id_account, amount, create_at
`

type CreateEntryParams struct {
	IDAccount int64
	Amount    int64
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.IDAccount, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.IDEntries,
		&i.IDAccount,
		&i.Amount,
		&i.CreateAt,
	)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT id_entries, id_account, amount, create_at FROM entries
WHERE id_entries = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, idEntries int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, idEntries)
	var i Entry
	err := row.Scan(
		&i.IDEntries,
		&i.IDAccount,
		&i.Amount,
		&i.CreateAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id_entries, id_account, amount, create_at FROM entries
ORDER BY id_entries
LIMIT $1 OFFSET $2
`

type ListEntriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.IDEntries,
			&i.IDAccount,
			&i.Amount,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntriesByAccount = `-- name: ListEntriesByAccount :many
SELECT id_entries, id_account, amount, create_at FROM entries
WHERE id_account = $3
ORDER BY id_entries
LIMIT $1 OFFSET $2
`

type ListEntriesByAccountParams struct {
	Limit     int32
	Offset    int32
	IDAccount int64
}

func (q *Queries) ListEntriesByAccount(ctx context.Context, arg ListEntriesByAccountParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesByAccount, arg.Limit, arg.Offset, arg.IDAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.IDEntries,
			&i.IDAccount,
			&i.Amount,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
