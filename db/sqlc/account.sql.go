// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  owner,
  balance,
  currency
) VALUES (
  $1, $2, $3
)
RETURNING id_account, owner, balance, currency, create_at
`

type CreateAccountParams struct {
	Owner    string
	Balance  string
	Currency string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Owner, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.IDAccount,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreateAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id_account = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, idAccount int64) error {
	_, err := q.db.Exec(ctx, deleteAccount, idAccount)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id_account, owner, balance, currency, create_at FROM accounts
WHERE id_account = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, idAccount int64) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, idAccount)
	var i Account
	err := row.Scan(
		&i.IDAccount,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreateAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id_account, owner, balance, currency, create_at FROM accounts
ORDER BY id_account
LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.IDAccount,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts
  set balance = $2
WHERE id_account = $1
`

type UpdateAccountParams struct {
	IDAccount int64
	Balance   string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.Exec(ctx, updateAccount, arg.IDAccount, arg.Balance)
	return err
}
